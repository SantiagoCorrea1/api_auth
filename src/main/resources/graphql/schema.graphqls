type Query {
    userById(id: ID!): User
    userByEmail(email: String!): User
}

type User{
    id: Int,
    idType: IdType!
    city: City!
    gender: Gender!
    role: Role!
    identificationNumber: String!
    firstName: String!
    lastName: String!
    birthDate: String!
    phoneNumber: String!
    email: String!
    password: String!
    avatarUrl: String!
    address: String!
}


input signUpInput{
        id: ID
        idType: Int!
        city: Int!
        gender: Int!
        role: Int!
        identificationNumber: String!
        firstName: String!
        lastName: String!
        birthDate: String!
        phoneNumber: String!
        email: String!
        password: String!
        avatarUrl: String!
        address: String!
}

type Mutation {
    signUp(input: signUpInput!): User
    modifyRole(email: String!, roleId: ID!): User
}



type Role {
    id: ID!
    name: String!
    description: String
    users: [User] # Relación OneToMany con User
    permissions: [Permission] # Relación ManyToMany con Permission
}

type Province {
    id: ID!
    name: String!
    country: Country # Relación ManyToOne con Country
    cities: [City] # Relación OneToMany con City
}

type Permission {
    id: ID!
    name: String!
    description: String
    roles: [Role] # Relación ManyToMany con Role
}

type IdType {
    id: ID!
    name: String!
    users: [User] # Relación OneToMany con User
}

type Gender {
    id: ID!
    name: String!
    users: [User] # Relación OneToMany con User
}

type Country {
    id: ID!
    name: String!
    provinces: [Province] # Relación OneToMany con Province
}

type City {
    id: ID!
    name: String!
    users: [User] # Relación OneToMany con User
    province: Province # Relación ManyToOne con Province
}